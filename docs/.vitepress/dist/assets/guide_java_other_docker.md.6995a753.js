import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.dd5a1521.js";const g=JSON.parse('{"title":"docker","description":"","frontmatter":{"title":"docker","date":"2023-08-23T08:46:11.000Z"},"headers":[],"relativePath":"guide/java/other/docker.md","filePath":"guide/java/other/docker.md"}'),e={name:"guide/java/other/docker.md"},p=l(`<h3 id="虚拟机安装docker以及启动" tabindex="-1">虚拟机安装Docker以及启动 <a class="header-anchor" href="#虚拟机安装docker以及启动" aria-label="Permalink to &quot;虚拟机安装Docker以及启动&quot;">​</a></h3><h4 id="将老版本docker删除干净" tabindex="-1">将老版本docker删除干净 <a class="header-anchor" href="#将老版本docker删除干净" aria-label="Permalink to &quot;将老版本docker删除干净&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">yum remove docker \\</span></span>
<span class="line"><span style="color:#e1e4e8;">                  docker-client \\</span></span>
<span class="line"><span style="color:#e1e4e8;">                  docker-client-latest \\</span></span>
<span class="line"><span style="color:#e1e4e8;">                  docker-common \\</span></span>
<span class="line"><span style="color:#e1e4e8;">                  docker-latest \\</span></span>
<span class="line"><span style="color:#e1e4e8;">                  docker-latest-logrotate \\</span></span>
<span class="line"><span style="color:#e1e4e8;">                  docker-logrotate \\</span></span>
<span class="line"><span style="color:#e1e4e8;">                  docker-engine</span></span>
<span class="line"><span style="color:#e1e4e8;">rpm  -qa |grep  docker</span></span>
<span class="line"><span style="color:#e1e4e8;">yum list installed | grep docker</span></span>
<span class="line"><span style="color:#e1e4e8;">yum remove -y  containerd.io.x86_64   docker-ce.x86_64   docker-ce-cli.x86_64</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">yum remove docker \\</span></span>
<span class="line"><span style="color:#24292e;">                  docker-client \\</span></span>
<span class="line"><span style="color:#24292e;">                  docker-client-latest \\</span></span>
<span class="line"><span style="color:#24292e;">                  docker-common \\</span></span>
<span class="line"><span style="color:#24292e;">                  docker-latest \\</span></span>
<span class="line"><span style="color:#24292e;">                  docker-latest-logrotate \\</span></span>
<span class="line"><span style="color:#24292e;">                  docker-logrotate \\</span></span>
<span class="line"><span style="color:#24292e;">                  docker-engine</span></span>
<span class="line"><span style="color:#24292e;">rpm  -qa |grep  docker</span></span>
<span class="line"><span style="color:#24292e;">yum list installed | grep docker</span></span>
<span class="line"><span style="color:#24292e;">yum remove -y  containerd.io.x86_64   docker-ce.x86_64   docker-ce-cli.x86_64</span></span></code></pre></div><p>安装见 <a href="https://blog.csdn.net/weixin_39553910/article/details/89953617" target="_blank" rel="noreferrer">教程</a></p><h4 id="修改docker-service文件" tabindex="-1">修改docker.service文件 <a class="header-anchor" href="#修改docker-service文件" aria-label="Permalink to &quot;修改docker.service文件&quot;">​</a></h4><p>/etc/systemd/system/docker.service</p><ul><li>第一种</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H fd:// --containerd=/run/containerd/containerd.sock</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H fd:// --containerd=/run/containerd/containerd.sock</span></span></code></pre></div><p>若启动失败，则删除 -H fd:// --containerd=/run/containerd/containerd.sock</p><ul><li>第二种</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock</span></span></code></pre></div><h4 id="重新加载配置" tabindex="-1">重新加载配置 <a class="header-anchor" href="#重新加载配置" aria-label="Permalink to &quot;重新加载配置&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">systemctl daemon-reload</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">systemctl daemon-reload</span></span></code></pre></div><h4 id="启动docker" tabindex="-1">启动docker <a class="header-anchor" href="#启动docker" aria-label="Permalink to &quot;启动docker&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">systemctl start docker</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">systemctl start docker</span></span></code></pre></div><h4 id="加入宿主机路由" tabindex="-1">加入宿主机路由 <a class="header-anchor" href="#加入宿主机路由" aria-label="Permalink to &quot;加入宿主机路由&quot;">​</a></h4><p>虚拟机启动docker，宿主机无法访问虚拟机中的docker，需加入路由</p><p>route -p add 172.17.0.0 mask 255.255.0.0 192.168.128.129 前面是docker的ip后面是虚拟机的ip</p><ul><li><p>其它方式(windows) <a href="https://blog.csdn.net/qq_35911589/article/details/130884067" target="_blank" rel="noreferrer">参考</a>)</p><ul><li><p>CMD管理员执行</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">netsh interface portproxy add v4tov4 listenport=2375 listenaddress= 10.245.228.89 connectaddress=127.0.0.1 connectport=2375</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">netsh interface portproxy add v4tov4 listenport=2375 listenaddress= 10.245.228.89 connectaddress=127.0.0.1 connectport=2375</span></span></code></pre></div></li><li><p>IP_Helper 服务重启</p></li></ul></li></ul><h4 id="dockerfile文件" tabindex="-1">Dockerfile文件 <a class="header-anchor" href="#dockerfile文件" aria-label="Permalink to &quot;Dockerfile文件&quot;">​</a></h4><ul><li>FROM 基于什么基础镜像</li><li>RUN 构建镜像时运行的指令</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">#运行shell指令</span></span>
<span class="line"><span style="color:#e1e4e8;">RUN yum install -y vim</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">#运行shell指令</span></span>
<span class="line"><span style="color:#24292e;">RUN yum install -y vim</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">#运行数组模式的命令</span></span>
<span class="line"><span style="color:#e1e4e8;">RUN [&quot;yum&quot;,&quot;install&quot;,&quot;-y&quot;,&quot;vim&quot;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">#运行数组模式的命令</span></span>
<span class="line"><span style="color:#24292e;">RUN [&quot;yum&quot;,&quot;install&quot;,&quot;-y&quot;,&quot;vim&quot;]</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">#运行echo打印</span></span>
<span class="line"><span style="color:#e1e4e8;">RUN echo hello</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">#运行echo打印</span></span>
<span class="line"><span style="color:#24292e;">RUN echo hello</span></span></code></pre></div><ul><li><p>EXPOSE 暴露的端口</p></li><li><p>WORKDIR 进入镜像的落脚点目录</p></li><li><p>COPY、ADD 将文件拷贝入镜像中</p><p>解释：区别：ADD会自动解压、ADD还能对文件中的地址进行自动下载，但对下载的压缩包不会自动解压</p></li><li><p>VOLUME 设置镜像可挂载目录</p></li><li><p>ENV 设置环境变量</p></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">ENV JAVA_HOME /data/JDK</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">ENV JAVA_HOME /data/JDK</span></span></code></pre></div><ul><li>CMD、ENTRYPOINT</li></ul><p>解释：区别，ENTRYPOINT只能执行一个指令，CMD可以运行多个但只能执行最后一个</p><p>与 RUN的区别，RUN是在镜像生成时执行，CMD和ENTRYPOINT是在运行容器时第一个命令</p><h3 id="常用命令" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令" aria-label="Permalink to &quot;常用命令&quot;">​</a></h3><h4 id="查看所有镜像" tabindex="-1">查看所有镜像 <a class="header-anchor" href="#查看所有镜像" aria-label="Permalink to &quot;查看所有镜像&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">docker images</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">docker images</span></span></code></pre></div><h4 id="新建镜像" tabindex="-1">新建镜像 <a class="header-anchor" href="#新建镜像" aria-label="Permalink to &quot;新建镜像&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">docker build -t  mycentos:01 .</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">docker build -t  mycentos:01 .</span></span></code></pre></div><p>解释：后面的.表示Dockerfile在当前路径下</p><h4 id="启动镜像" tabindex="-1">启动镜像 <a class="header-anchor" href="#启动镜像" aria-label="Permalink to &quot;启动镜像&quot;">​</a></h4><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-it</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">centos</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-it</span><span style="color:#24292E;"> </span><span style="color:#032F62;">centos</span></span></code></pre></div><p>解释：加it表示运行时进入container</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#加长版run</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-d</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">9669</span><span style="color:#9ECBFF;">:9669</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--name</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">demoname</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mycentos:01</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--network</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">host</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#加长版run</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">9669</span><span style="color:#032F62;">:9669</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">demoname</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mycentos:01</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--network</span><span style="color:#24292E;"> </span><span style="color:#032F62;">host</span></span></code></pre></div><p>解释：-d 后台启动 -p 设置端口映射 --name 设置容器名称 --network host 以当前服务器的ip作为容器ip</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-d</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">9669</span><span style="color:#9ECBFF;">:9669</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--name</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">demoname</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mycentos:01</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--restart=always</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">9669</span><span style="color:#032F62;">:9669</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">demoname</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mycentos:01</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--restart=always</span></span></code></pre></div><p>解释：--restart=always 服务器开机自启镜像</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">exec</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-it</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">exec</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-it</span></span></code></pre></div><p>解释：在运行的容器中执行命令</p><h4 id="查看容器" tabindex="-1">查看容器 <a class="header-anchor" href="#查看容器" aria-label="Permalink to &quot;查看容器&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">#查看正在运行的容器</span></span>
<span class="line"><span style="color:#e1e4e8;">docker ps</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">#查看正在运行的容器</span></span>
<span class="line"><span style="color:#24292e;">docker ps</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">#查看运行过的容器</span></span>
<span class="line"><span style="color:#e1e4e8;">docker ps -a</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">#查看运行过的容器</span></span>
<span class="line"><span style="color:#24292e;">docker ps -a</span></span></code></pre></div><h4 id="关闭容器" tabindex="-1">关闭容器 <a class="header-anchor" href="#关闭容器" aria-label="Permalink to &quot;关闭容器&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">docker stop 容器名</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">docker stop 容器名</span></span></code></pre></div><h4 id="移除容器" tabindex="-1">移除容器 <a class="header-anchor" href="#移除容器" aria-label="Permalink to &quot;移除容器&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">#移除停止的容器</span></span>
<span class="line"><span style="color:#e1e4e8;">docker rm 容器名</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">#移除停止的容器</span></span>
<span class="line"><span style="color:#24292e;">docker rm 容器名</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">#移除全部已经停止的容器</span></span>
<span class="line"><span style="color:#e1e4e8;">docker rm $(docker ps -qa)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">#移除全部已经停止的容器</span></span>
<span class="line"><span style="color:#24292e;">docker rm $(docker ps -qa)</span></span></code></pre></div><h4 id="移除镜像" tabindex="-1">移除镜像 <a class="header-anchor" href="#移除镜像" aria-label="Permalink to &quot;移除镜像&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">docker rmi 镜像ID</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">docker rmi 镜像ID</span></span></code></pre></div><h4 id="镜像物理转移" tabindex="-1">镜像物理转移 <a class="header-anchor" href="#镜像物理转移" aria-label="Permalink to &quot;镜像物理转移&quot;">​</a></h4><ul><li>镜像转tar</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">save</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-o</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">aaa.tar</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mycentos:01</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">save</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-o</span><span style="color:#24292E;"> </span><span style="color:#032F62;">aaa.tar</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mycentos:01</span></span></code></pre></div><ul><li>tar转镜像</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">load</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-i</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">aaa.tar</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">load</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-i</span><span style="color:#24292E;"> </span><span style="color:#032F62;">aaa.tar</span></span></code></pre></div><h4 id="修改镜像中的内容" tabindex="-1">修改镜像中的内容 <a class="header-anchor" href="#修改镜像中的内容" aria-label="Permalink to &quot;修改镜像中的内容&quot;">​</a></h4><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-it</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--name</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">temp_container</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">image_nam</span><span style="color:#E1E4E8;">e</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/bin/bash</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-it</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">temp_container</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">image_nam</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/bin/bash</span></span></code></pre></div><h4 id="docker容器的模式" tabindex="-1">docker容器的模式 <a class="header-anchor" href="#docker容器的模式" aria-label="Permalink to &quot;docker容器的模式&quot;">​</a></h4><ol><li>桥接模式（Bridge）：容器连接到一个虚拟网桥中，在该虚拟网桥中，它们可以相互通信，也可以与宿主机和外部网络通信。</li><li>主机模式（Host）：容器直接使用主机的网络，能够和外部网络进行直接通信。</li><li>容器模式（Container）：将一个容器连接到另一个容器的网络栈中，这样它们就可以直接通信。</li><li>无网络模式（None）：容器没有网络，只能通过ipc的方式通信。</li></ol><h4 id="常规参数" tabindex="-1">常规参数 <a class="header-anchor" href="#常规参数" aria-label="Permalink to &quot;常规参数&quot;">​</a></h4><h5 id="允许容器访问宿主机的网络接口" tabindex="-1">允许容器访问宿主机的网络接口 <a class="header-anchor" href="#允许容器访问宿主机的网络接口" aria-label="Permalink to &quot;允许容器访问宿主机的网络接口&quot;">​</a></h5><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">--add-host</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">host.docker.internal:host-gateway</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">--add-host</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">host.docker.internal:host-gateway</span></span></code></pre></div><h4 id="注" tabindex="-1">注 <a class="header-anchor" href="#注" aria-label="Permalink to &quot;注&quot;">​</a></h4><ul><li>使用docker-desktop启动容器后网段为WSL的网段</li></ul><h3 id="idea集成docker" tabindex="-1">IDEA集成docker <a class="header-anchor" href="#idea集成docker" aria-label="Permalink to &quot;IDEA集成docker&quot;">​</a></h3><h4 id="安装docker插件" tabindex="-1">安装docker插件 <a class="header-anchor" href="#安装docker插件" aria-label="Permalink to &quot;安装docker插件&quot;">​</a></h4><h4 id="编写dockerfile文件" tabindex="-1">编写Dockerfile文件 <a class="header-anchor" href="#编写dockerfile文件" aria-label="Permalink to &quot;编写Dockerfile文件&quot;">​</a></h4><div class="language-dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#设置基础镜像</span></span>
<span class="line"><span style="color:#F97583;">FROM</span><span style="color:#E1E4E8;"> openjdk:8-jre</span></span>
<span class="line"><span style="color:#6A737D;">#设置进入镜像的目录</span></span>
<span class="line"><span style="color:#F97583;">WORKDIR</span><span style="color:#E1E4E8;"> /app</span></span>
<span class="line"><span style="color:#6A737D;">#将上下文目录中的jar复制到WORKDIR目录</span></span>
<span class="line"><span style="color:#F97583;">ADD</span><span style="color:#E1E4E8;"> docker-0.0.1-SNAPSHOT.jar app.jar</span></span>
<span class="line"><span style="color:#6A737D;">#暴露接口</span></span>
<span class="line"><span style="color:#F97583;">EXPOSE</span><span style="color:#E1E4E8;"> 9669</span></span>
<span class="line"><span style="color:#6A737D;">#容器运行时最先执行的命令</span></span>
<span class="line"><span style="color:#F97583;">ENTRYPOINT</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;java&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;-jar&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">CMD</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;app.jar&quot;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#设置基础镜像</span></span>
<span class="line"><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> openjdk:8-jre</span></span>
<span class="line"><span style="color:#6A737D;">#设置进入镜像的目录</span></span>
<span class="line"><span style="color:#D73A49;">WORKDIR</span><span style="color:#24292E;"> /app</span></span>
<span class="line"><span style="color:#6A737D;">#将上下文目录中的jar复制到WORKDIR目录</span></span>
<span class="line"><span style="color:#D73A49;">ADD</span><span style="color:#24292E;"> docker-0.0.1-SNAPSHOT.jar app.jar</span></span>
<span class="line"><span style="color:#6A737D;">#暴露接口</span></span>
<span class="line"><span style="color:#D73A49;">EXPOSE</span><span style="color:#24292E;"> 9669</span></span>
<span class="line"><span style="color:#6A737D;">#容器运行时最先执行的命令</span></span>
<span class="line"><span style="color:#D73A49;">ENTRYPOINT</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;java&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;-jar&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">CMD</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;app.jar&quot;</span><span style="color:#24292E;">]</span></span></code></pre></div><h4 id="pom中引入dockerfile" tabindex="-1">POM中引入dockerfile <a class="header-anchor" href="#pom中引入dockerfile" aria-label="Permalink to &quot;POM中引入dockerfile&quot;">​</a></h4><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">build</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#85E89D;">plugins</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">		&lt;</span><span style="color:#85E89D;">plugin</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">			&lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">			&lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-boot-maven-plugin&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">		&lt;/</span><span style="color:#85E89D;">plugin</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">		&lt;</span><span style="color:#85E89D;">plugin</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">			&lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;com.spotify&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">			&lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;docker-maven-plugin&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">			&lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;1.0.0&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">			&lt;</span><span style="color:#85E89D;">configuration</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#6A737D;">&lt;!-- 这里实际配置的是在docker服务器上要执行的命令 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#6A737D;">&lt;!-- 要生成的镜像名称 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">				&lt;</span><span style="color:#85E89D;">imageName</span><span style="color:#E1E4E8;">&gt;dockerdemo:0.0.1&lt;/</span><span style="color:#85E89D;">imageName</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#6A737D;">&lt;!-- 指定远程 docker api地址 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">				&lt;</span><span style="color:#85E89D;">dockerHost</span><span style="color:#E1E4E8;">&gt;http://172.17.0.1:2375&lt;/</span><span style="color:#85E89D;">dockerHost</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#6A737D;">&lt;!-- 配置用户的安全验证，用户名和密码，需在maven的setting.xml文件中进行配置 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#6A737D;">&lt;!-- setting.xml有两处配置位置：</span></span>
<span class="line"><span style="color:#6A737D;">				1.用户/.m2/settings.xml</span></span>
<span class="line"><span style="color:#6A737D;">				2.maven/apache-maven-3.6.3/conf/setting.xml(maven安装路径)--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">				&lt;</span><span style="color:#85E89D;">serverId</span><span style="color:#E1E4E8;">&gt;my-docker-registry&lt;/</span><span style="color:#85E89D;">serverId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#6A737D;">&lt;!-- 配置tar信息及地址(需要先对项目进行package打包) --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">				&lt;</span><span style="color:#85E89D;">resources</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">					&lt;</span><span style="color:#85E89D;">resource</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">						&lt;</span><span style="color:#85E89D;">directory</span><span style="color:#E1E4E8;">&gt;\${project.build.directory}&lt;/</span><span style="color:#85E89D;">directory</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">						&lt;</span><span style="color:#85E89D;">include</span><span style="color:#E1E4E8;">&gt;\${project.build.finalName}.jar&lt;/</span><span style="color:#85E89D;">include</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">					&lt;/</span><span style="color:#85E89D;">resource</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">				&lt;/</span><span style="color:#85E89D;">resources</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#6A737D;">&lt;!-- 描述，可以写开发人员的信息 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">				&lt;</span><span style="color:#85E89D;">maintainer</span><span style="color:#E1E4E8;">&gt;docker_maven docker_maven@email.com&lt;/</span><span style="color:#85E89D;">maintainer</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#6A737D;">&lt;!-- 引入Dockerfile--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">				&lt;</span><span style="color:#85E89D;">dockerDirectory</span><span style="color:#E1E4E8;">&gt;\${project.basedir}/src/main/docker&lt;/</span><span style="color:#85E89D;">dockerDirectory</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">			&lt;/</span><span style="color:#85E89D;">configuration</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">		&lt;/</span><span style="color:#85E89D;">plugin</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;/</span><span style="color:#85E89D;">plugins</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">build</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">build</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">plugins</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;</span><span style="color:#22863A;">plugin</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">			&lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.boot&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">			&lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-boot-maven-plugin&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;/</span><span style="color:#22863A;">plugin</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;</span><span style="color:#22863A;">plugin</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">			&lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;com.spotify&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">			&lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;docker-maven-plugin&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">			&lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;1.0.0&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">			&lt;</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6A737D;">&lt;!-- 这里实际配置的是在docker服务器上要执行的命令 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6A737D;">&lt;!-- 要生成的镜像名称 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">				&lt;</span><span style="color:#22863A;">imageName</span><span style="color:#24292E;">&gt;dockerdemo:0.0.1&lt;/</span><span style="color:#22863A;">imageName</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6A737D;">&lt;!-- 指定远程 docker api地址 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">				&lt;</span><span style="color:#22863A;">dockerHost</span><span style="color:#24292E;">&gt;http://172.17.0.1:2375&lt;/</span><span style="color:#22863A;">dockerHost</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6A737D;">&lt;!-- 配置用户的安全验证，用户名和密码，需在maven的setting.xml文件中进行配置 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6A737D;">&lt;!-- setting.xml有两处配置位置：</span></span>
<span class="line"><span style="color:#6A737D;">				1.用户/.m2/settings.xml</span></span>
<span class="line"><span style="color:#6A737D;">				2.maven/apache-maven-3.6.3/conf/setting.xml(maven安装路径)--&gt;</span></span>
<span class="line"><span style="color:#24292E;">				&lt;</span><span style="color:#22863A;">serverId</span><span style="color:#24292E;">&gt;my-docker-registry&lt;/</span><span style="color:#22863A;">serverId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6A737D;">&lt;!-- 配置tar信息及地址(需要先对项目进行package打包) --&gt;</span></span>
<span class="line"><span style="color:#24292E;">				&lt;</span><span style="color:#22863A;">resources</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">					&lt;</span><span style="color:#22863A;">resource</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">						&lt;</span><span style="color:#22863A;">directory</span><span style="color:#24292E;">&gt;\${project.build.directory}&lt;/</span><span style="color:#22863A;">directory</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">						&lt;</span><span style="color:#22863A;">include</span><span style="color:#24292E;">&gt;\${project.build.finalName}.jar&lt;/</span><span style="color:#22863A;">include</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">					&lt;/</span><span style="color:#22863A;">resource</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">				&lt;/</span><span style="color:#22863A;">resources</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6A737D;">&lt;!-- 描述，可以写开发人员的信息 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">				&lt;</span><span style="color:#22863A;">maintainer</span><span style="color:#24292E;">&gt;docker_maven docker_maven@email.com&lt;/</span><span style="color:#22863A;">maintainer</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6A737D;">&lt;!-- 引入Dockerfile--&gt;</span></span>
<span class="line"><span style="color:#24292E;">				&lt;</span><span style="color:#22863A;">dockerDirectory</span><span style="color:#24292E;">&gt;\${project.basedir}/src/main/docker&lt;/</span><span style="color:#22863A;">dockerDirectory</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">			&lt;/</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;/</span><span style="color:#22863A;">plugin</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;/</span><span style="color:#22863A;">plugins</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">build</span><span style="color:#24292E;">&gt;</span></span></code></pre></div>`,74),o=[p];function t(c,r,i,d,y,E){return a(),n("div",null,o)}const u=s(e,[["render",t]]);export{g as __pageData,u as default};
